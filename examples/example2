class GameOfLife
  def initialize(rows, cols)
    @rows = rows
    @cols = cols
    @grid = Array.new(rows) { Array.new(cols, false) }
  end

  # Method to set the initial state of the grid
  def set_initial_state(initial_state)
    initial_state.each_with_index do |row, i|
      row.each_with_index do |cell, j|
        @grid[i][j] = (cell == 1)
      end
    end
  end

  # Method to print the current state of the grid
  def print_grid
    @grid.each do |row|
      row.each do |cell|
        print cell ? "X " : ". "
      end
      puts
    end
    puts
  end

  # Method to calculate the next generation of the grid
  def next_generation
    new_grid = Array.new(@rows) { Array.new(@cols, false) }
    (0...@rows).each do |i|
      (0...@cols).each do |j|
        live_neighbors = count_live_neighbors(i, j)
        if @grid[i][j]
          # Any live cell with fewer than two live neighbors dies (underpopulation)
          # Any live cell with two or three live neighbors lives on to the next generation
          # Any live cell with more than three live neighbors dies (overpopulation)
          new_grid[i][j] = (live_neighbors == 2 || live_neighbors == 3)
        else
          # Any dead cell with exactly three live neighbors becomes a live cell (reproduction)
          new_grid[i][j] = (live_neighbors == 3)
        end
      end
    end
    @grid = new_grid
  end

  # Method to count the number of live neighbors around a cell
  def count_live_neighbors(row, col)
    count = 0
    (-1..1).each do |i|
      (-1..1).each do |j|
        next if i == 0 && j == 0 # Skip the center cell (the cell itself)
        new_row = row + i
        new_col = col + j
        if new_row >= 0 && new_row < @rows && new_col >= 0 && new_col < @cols
          count += 1 if @grid[new_row][new_col]
        end
      end
    end
    count
  end

  # Main method to run the simulation
  def self.main
    rows = 8
    cols = 10
    initial_state = [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
      [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]

    game = GameOfLife.new(rows, cols)
    game.set_initial_state(initial_state)

    5.times do |generation|
      puts "Generation #{generation + 1}:"
      game.print_grid
      game.next_generation
    end
  end
end

# Run the simulation
GameOfLife.main
